"use client";
import {
  addDoc,
  collection,
  getFirestore,
  limit,
  orderBy,
  query,
  serverTimestamp,
} from "firebase/firestore";
// import Image from "next/image";
import { useUser } from "@clerk/nextjs";
import { useRef, useState } from "react";
import { app } from "../../../../../firebaseConfig";
import { useCollectionData } from "react-firebase-hooks/firestore";

const ChatMessage = (props) => {
  const { text, uid } = props.message;
  // const { isLoaded, isSignedIn, user } = useUser();
  // const messageClass = uid === user.id ? "sent" : "received";

  // // Check if the user is loaded
  // if (!isLoaded) {
  //   return <div>Loading...</div>;
  // }

  // // Check if the user is signed in
  // if (!isSignedIn) {
  //   return <div>No user is signed in</div>;
  // }

  return (
    <div className={`message ${messageClass}`}>
      {/* <Image src={user.imageUrl} alt="User profile" width={60} height={60} /> */}
      <p>{text}</p>
    </div>
  );
};

const ChatRoom = () => {
  const db = getFirestore(app);
  const messagesRef = collection(db, "messages/");
  const messagesQuery = query(messagesRef, orderBy("createdAt"), limit(25));
  const [messages] = useCollectionData(messagesQuery, { idField: "id" });
  // const messagesRef = collection("messages");
  // const query = messagesRef.orderBy("createdAt").limit(25);
  // const [messages] = useCollectionData(query, { idField: "id" });
  const [formValue, setFormValue] = useState("");
  const { isLoaded, isSignedIn, user } = useUser();
  const dummy = useRef();

  const sendMessage = async (e) => {
    e.preventDefault();
    // let uid = user.id;
    await addDoc(messagesRef, {
      text: formValue,
      createdAt: serverTimestamp(),
      // uid,
    });
    // await messagesRef.add({
    //   text: formValue,
    //   createdAt: serverTimestamp(),
    //   uid,
    // });
    setFormValue("");
    dummy.current.scrollIntoView({ behaviour: "smooth" });
  };

  return (
    <>
      <main>
        {messages?.map((msg) => (
          <ChatMessage key={msg.id} message={msg} />
        ))}
        <div ref={dummy}></div>
      </main>
      <form onSubmit={sendMessage}>
        <input
          type="text"
          name="message"
          value={formValue}
          onChange={(e) => setFormValue(e.target.value)}
          required
        />
        <button type="submit">Send</button>
      </form>
    </>
  );
};
export default ChatRoom;
